From PLF Require Import Syntax.
Open Scope string_scope.

Example prog_well_typed : exists p, program_well_typed p.
Proof with (simpl;try(reflexivity)).
unfold program_well_typed.
eexists.
eexists.
eapply T_ClassDecl with(name:="Solution")...
eapply T_MethodDecl with(modif:="public")(T:=TyInt)(m:="maxProfit")...
{ eapply T_Concat...
  { eapply T_DeclNoInit with(T:=(TyArray TyInt))(x:="prices")... }
  { eapply T_Skip... } }
{ eapply T_Concat...
  { eapply T_Concat...
    { eapply T_DeclInit with(T:=TyInt)(x:="i")...
      { eapply T_Integer with(n:=0)... }
      { simpl... } }
    { eapply T_Skip... } }
  { eapply T_Concat...
    { eapply T_Concat...
      { eapply T_DeclInit with(T:=TyInt)(x:="valley")...
        { eapply T_ArrayAccess...
          { eapply T_Var with(x:="prices")... }
          { eapply T_Integer with(n:=0)... } }
        { simpl... } }
      { eapply T_Skip... } }
    { eapply T_Concat...
      { eapply T_Concat...
        { eapply T_DeclInit with(T:=TyInt)(x:="peak")...
          { eapply T_ArrayAccess...
            { eapply T_Var with(x:="prices")... }
            { eapply T_Integer with(n:=0)... } }
          { simpl... } }
        { eapply T_Skip... } }
      { eapply T_Concat...
        { eapply T_Concat...
          { eapply T_DeclInit with(T:=TyInt)(x:="maxprofit")...
            { eapply T_Integer with(n:=0)... }
            { simpl... } }
          { eapply T_Skip... } }
        { eapply T_Concat...
          { eapply T_While...
            { eapply T_Lt...
              { eapply T_Var with(x:="i")... }
              { eapply T_Sub...
                { eapply T_FieldAccess with(f:="length")...
                  { eapply T_Var with(x:="prices")... }
                  { simpl... }
                  { simpl... } }
                { eapply T_Integer with(n:=1)... }
                { simpl... } } }
            { eapply T_Concat...
              { eapply T_While...
                { eapply T_And...
                  { eapply T_Lt...
                    { eapply T_Var with(x:="i")... }
                    { eapply T_Sub...
                      { eapply T_FieldAccess with(f:="length")...
                        { eapply T_Var with(x:="prices")... }
                        { simpl... }
                        { simpl... } }
                      { eapply T_Integer with(n:=1)... }
                      { simpl... } } }
                  { eapply T_Ge...
                    { eapply T_ArrayAccess...
                      { eapply T_Var with(x:="prices")... }
                      { eapply T_Var with(x:="i")... } }
                    { eapply T_ArrayAccess...
                      { eapply T_Var with(x:="prices")... }
                      { eapply T_Add...
                        { eapply T_Var with(x:="i")... }
                        { eapply T_Integer with(n:=1)... } } } } }
                { eapply T_Expression...
                  eapply T_PostInc...
                  eapply T_Var with(x:="i")... } }
              { eapply T_Concat...
                { eapply T_Expression...
                  eapply T_Assign...
                  { eapply T_Var with(x:="valley")... }
                  { eapply T_ArrayAccess...
                    { eapply T_Var with(x:="prices")... }
                    { eapply T_Var with(x:="i")... } } }
                { eapply T_Concat...
                  { eapply T_While...
                    { eapply T_And...
                      { eapply T_Lt...
                        { eapply T_Var with(x:="i")... }
                        { eapply T_Sub...
                          { eapply T_FieldAccess with(f:="length")...
                            { eapply T_Var with(x:="prices")... }
                            { simpl... }
                            { simpl... } }
                          { eapply T_Integer with(n:=1)... }
                          { simpl... } } }
                      { eapply T_Le...
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="prices")... }
                          { eapply T_Var with(x:="i")... } }
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="prices")... }
                          { eapply T_Add...
                            { eapply T_Var with(x:="i")... }
                            { eapply T_Integer with(n:=1)... } } } } }
                    { eapply T_Expression...
                      eapply T_PostInc...
                      eapply T_Var with(x:="i")... } }
                  { eapply T_Concat...
                    { eapply T_Expression...
                      eapply T_Assign...
                      { eapply T_Var with(x:="peak")... }
                      { eapply T_ArrayAccess...
                        { eapply T_Var with(x:="prices")... }
                        { eapply T_Var with(x:="i")... } } }
                    { eapply T_Concat...
                      { eapply T_Expression...
                        eapply T_Assign...
                        { eapply T_Var with(x:="maxprofit")... }
                        { eapply T_Add...
                          { eapply T_Var with(x:="maxprofit")... }
                          { eapply T_Sub...
                            { eapply T_Var with(x:="peak")... }
                            { eapply T_Var with(x:="valley")... }
                            { simpl... } } } }
                      { eapply T_Skip... } } } } } } }
          { eapply T_Concat...
            { eapply T_Return...
              { eapply T_Var with(x:="maxprofit")... }
              { simpl... } }
            { eapply T_Skip... } } } } } } }
  Unshelve.
  all: apply STyVoid.
Defined.
Definition prog := the_exists_term (prog_well_typed).
Print prog.