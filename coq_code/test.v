From PLF Require Import Syntax.
Open Scope string_scope.

Example prog_well_typed : exists p, program_well_typed p.
Proof with (simpl;try(reflexivity)).
unfold program_well_typed.
eexists.
eexists.
eapply T_ProgramConcat...
{ eapply T_ImportDecl with(n1:="java.util")(n2:="Arrays")... }
{ eapply T_ClassDecl with(name:="Solution")...
  eapply T_MethodDecl with(modif:="public")(T:=TyInt)(m:="findLHS")...
  { eapply T_Concat...
    { eapply T_DeclNoInit with(T:=(TyArray TyInt))(x:="nums")... }
    { eapply T_Skip... } }
  { eapply T_Concat...
    { eapply T_Expression...
      eapply T_TyMethodInvocation' with(m:="sort")(T:=(TyExternal "Arrays"))...
      eapply T_List...
      { eapply T_Var with(x:="nums")... }
      { eapply T_Nil... } }
    { eapply T_Concat...
      { eapply T_Concat...
        { eapply T_DeclInit with(T:=TyInt)(x:="prev_count")...
          eapply T_Integer with(n:=1)... }
        { eapply T_Concat...
          { eapply T_DeclInit with(T:=TyInt)(x:="res")...
            eapply T_Integer with(n:=0)... }
          { eapply T_Skip... } } }
      { eapply T_Concat...
        { eapply T_For...
          { eapply T_Concat...
            { eapply T_DeclInit with(T:=TyInt)(x:="i")...
              eapply T_Integer with(n:=0)... }
            { eapply T_Skip... } }
          { eapply T_Lt...
            { eapply T_Var with(x:="i")... }
            { eapply T_FieldAccess' with(f:="length")...
              eapply T_Var with(x:="nums")... } }
          { eapply T_PostInc...
            eapply T_Var with(x:="i")... }
          { eapply T_Concat...
            { eapply T_Concat...
              { eapply T_DeclInit with(T:=TyInt)(x:="count")...
                eapply T_Integer with(n:=1)... }
              { eapply T_Skip... } }
            { eapply T_Concat...
              { eapply T_IfElse...
                { eapply T_And...
                  { eapply T_Gt...
                    { eapply T_Var with(x:="i")... }
                    { eapply T_Integer with(n:=0)... } }
                  { eapply T_Eq...
                    { eapply T_Sub...
                      { eapply T_ArrayAccess...
                        { eapply T_Var with(x:="nums")... }
                        { eapply T_Var with(x:="i")... } }
                      { eapply T_ArrayAccess...
                        { eapply T_Var with(x:="nums")... }
                        { eapply T_Sub...
                          { eapply T_Var with(x:="i")... }
                          { eapply T_Integer with(n:=1)... } } } }
                    { eapply T_Integer with(n:=1)... } } }
                { eapply T_Concat...
                  { eapply T_While...
                    { eapply T_And...
                      { eapply T_Lt...
                        { eapply T_Var with(x:="i")... }
                        { eapply T_Sub...
                          { eapply T_FieldAccess' with(f:="length")...
                            eapply T_Var with(x:="nums")... }
                          { eapply T_Integer with(n:=1)... } } }
                      { eapply T_Eq...
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="nums")... }
                          { eapply T_Var with(x:="i")... } }
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="nums")... }
                          { eapply T_Add...
                            { eapply T_Var with(x:="i")... }
                            { eapply T_Integer with(n:=1)... } } } } }
                    { eapply T_Concat...
                      { eapply T_Expression...
                        eapply T_PostInc...
                        eapply T_Var with(x:="count")... }
                      { eapply T_Concat...
                        { eapply T_Expression...
                          eapply T_PostInc...
                          eapply T_Var with(x:="i")... }
                        { eapply T_Skip... } } } }
                  { eapply T_Concat...
                    { eapply T_Expression...
                      eapply T_Assign...
                      { eapply T_Var with(x:="res")... }
                      { eapply T_TyMethodInvocation' with(m:="max")(T:=(TyExternal "Math"))...
                        eapply T_List...
                        { eapply T_Var with(x:="res")... }
                        { eapply T_List...
                          { eapply T_Add...
                            { eapply T_Var with(x:="count")... }
                            { eapply T_Var with(x:="prev_count")... } }
                          { eapply T_Nil... } } } }
                    { eapply T_Concat...
                      { eapply T_Expression...
                        eapply T_Assign...
                        { eapply T_Var with(x:="prev_count")... }
                        { eapply T_Var with(x:="count")... } }
                      { eapply T_Skip... } } } }
                { eapply T_Concat...
                  { eapply T_While...
                    { eapply T_And...
                      { eapply T_Lt...
                        { eapply T_Var with(x:="i")... }
                        { eapply T_Sub...
                          { eapply T_FieldAccess' with(f:="length")...
                            eapply T_Var with(x:="nums")... }
                          { eapply T_Integer with(n:=1)... } } }
                      { eapply T_Eq...
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="nums")... }
                          { eapply T_Var with(x:="i")... } }
                        { eapply T_ArrayAccess...
                          { eapply T_Var with(x:="nums")... }
                          { eapply T_Add...
                            { eapply T_Var with(x:="i")... }
                            { eapply T_Integer with(n:=1)... } } } } }
                    { eapply T_Concat...
                      { eapply T_Expression...
                        eapply T_PostInc...
                        eapply T_Var with(x:="count")... }
                      { eapply T_Concat...
                        { eapply T_Expression...
                          eapply T_PostInc...
                          eapply T_Var with(x:="i")... }
                        { eapply T_Skip... } } } }
                  { eapply T_Concat...
                    { eapply T_Expression...
                      eapply T_Assign...
                      { eapply T_Var with(x:="prev_count")... }
                      { eapply T_Var with(x:="count")... } }
                    { eapply T_Skip... } } } }
              { eapply T_Skip... } } } }
        { eapply T_Concat...
          { eapply T_Return...
            eapply T_Var with(x:="res")... }
          { eapply T_Skip... } } } } } }
  Unshelve.
  all: apply STyVoid.
Defined.
Definition prog := the_exists_term (prog_well_typed).
Print prog.